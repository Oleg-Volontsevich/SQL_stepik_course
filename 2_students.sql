-- students_data_base

-- Для каждого вопроса вывести процент успешных решений, то есть отношение количества верных 
-- ответов к общему количеству ответов, значение округлить до 2-х знаков после запятой. 
-- Также вывести название предмета, к которому относится вопрос, и общее количество ответов на этот вопрос. 
-- В результат включить название дисциплины, вопросы по ней (столбец назвать Вопрос), 
-- а также два вычисляемых столбца Всего_ответов и Успешность. 
-- Информацию отсортировать сначала по названию дисциплины, потом по убыванию успешности, 
-- а потом по тексту вопроса в алфавитном порядке.
-- Поскольку тексты вопросов могут быть длинными, обрезать их 30 символов и добавить многоточие "...".

SELECT name_subject, 
    CONCAT(LEFT(name_question,30),'...') AS 'Вопрос', 
    COUNT(name_answer) AS 'Всего_ответов', 
    ROUND(SUM(is_correct)/COUNT(name_answer)*100, 2) AS 'Успешность'
FROM 
    testing JOIN attempt USING(attempt_id)
            JOIN subject USING(subject_id)
            JOIN answer USING(answer_id)
            JOIN question ON(answer.question_id=question.question_id)           
GROUP BY name_subject, name_question
ORDER BY name_subject, Успешность DESC, Вопрос;


--------------------------------------------------------------------------
-- Студент прошел тестирование (то есть все его ответы занесены в таблицу testing), 
-- далее необходимо вычислить результат(запрос) и занести его в таблицу attempt для соответствующей попытки.  
-- Результат попытки вычислить как количество правильных ответов, деленное на 3 
-- (количество вопросов в каждой попытке) и умноженное на 100. Результат округлить до целого.
-- Будем считать, что мы знаем id попытки,  для которой вычисляется результат, в нашем случае это 8.

UPDATE attempt 
SET result = (SELECT ROUND(SUM(is_correct)/3*100)
              FROM testing JOIN answer USING(answer_id)
              WHERE attempt_id = 8) 
WHERE attempt_id = 8;

--------------------------------------------------------------------------
-- Посчитать количество баллов каждого абитуриента на каждую образовательную программу, 
-- на которую он подал заявление, по результатам ЕГЭ. 
-- В результат включить название образовательной программы, фамилию и имя абитуриента, 
-- а также столбец с суммой баллов, который назвать itog. 
-- Информацию вывести в отсортированном сначала по образовательной программе, 
-- а потом по убыванию суммы баллов виде.

DSELECT name_program, name_enrollee, SUM(result)AS itog
FROM enrollee 
    JOIN program_enrollee USING(enrollee_id)
    JOIN program USING(program_id)
    JOIN program_subject USING(program_id)
    JOIN enrollee_subject USING(subject_id, enrollee_id)
GROUP BY 1, 2
ORDER BY 1, 3 DESC;

--------------------------------------------------------------------------
-- Создать таблицу student,  в которую включить абитуриентов, 
-- которые могут быть рекомендованы к зачислению  в соответствии с планом набора. 
-- Информацию отсортировать сначала в алфавитном порядке по названию программ, 
-- а потом по убыванию итогового балла.

CREATE TABLE student AS
SELECT name_program, name_enrollee, itog
FROM applicant_order JOIN program USING(program_id)
                     JOIN enrollee USING(enrollee_id)
WHERE str_id <= plan
ORDER BY 1, 3 DESC;